{{- if .Values.apps.traefik.enabled -}}
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: traefik-ingress-controller
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "0"
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  project: default
  source:
    chart: traefik
    repoURL: https://helm.traefik.io/traefik
    targetRevision: 30.1.0
    helm:
      # Values file as block file
      valuesObject:
        # traefik/values.yaml

        # Enabling Traefik as an Ingress Controller
        deployment:
          enabled: true

        experimental:
          plugins:
            traefik-plugin-cloudflare:
              moduleName: "github.com/agence-gaya/traefik-plugin-cloudflare"
              version: "v1.2.0"

        # Configure the ports exposed by Traefik
        ports:
          web:
            port: 80
            nodePort: 32080
            expose:
              default: true
            middlewares:
              - "argocd-cloudflare@kubernetescrd"
          websecure:
            port: 443
            nodePort: 32443
            expose:
              default: true
            middlewares:
              - "argocd-cloudflare@kubernetescrd"
          # Additional custom ports
          {{- range $key, $value := .Values.apps.traefik.additionalExposedPorts }}
          {{ $key }}:
            port: {{ $value.port }}
            expose:
              default: true
            exposedPort: {{ $value.port }}
            protocol: {{ $value.protocol }}
          {{- end }}

        # Enabling Traefik's access logs for monitoring traffic
        accessLogs:
          enabled: true

        additionalArguments:
          - --entrypoints.websecure.http.tls.certresolver=cloudflare
          - --entrypoints.websecure.http.tls.domains[0].main={{.Values.domain}}
          - --entrypoints.websecure.http.tls.domains[0].sans=*.{{.Values.domain}}
          - --entryPoints.web.proxyProtocol.insecure
          - --entryPoints.web.forwardedHeaders.insecure
          - --entrypoints.web.http.redirections.entrypoint.to=websecure
          - --entrypoints.web.http.redirections.entrypoint.scheme=https
          - --entrypoints.web.http.redirections.entrypoint.permanent=true
          - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare
          - --certificatesresolvers.cloudflare.acme.email={{.Values.letsencrypt.email}}
          - --certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=1.1.1.1
          - --certificatesresolvers.cloudflare.acme.storage=/data/dns_acme.json

        # Traefik logs settings
        logs:
          general:
            level: DEBUG
          access:
            enabled: true
            fields:
              defaultMode: keep

        ingressRoute:
          dashboard:
            enabled: true
            insecure: true

        tls:
          enabled: true
          # this is the name of a TLSOption definition
          options: ""
          certResolver: "cloudflare"

        persistence:
          enabled: true
          name: traefik-data
          existingClaim: "traefik-data-pvc"
          path: /data

        service:
          enabled: true
          type: LoadBalancer
          spec:
            externalTrafficPolicy: Local
  {{- if .Values.apps.traefik.loadBalancerIP }}
          externalIPs:
            - {{.Values.apps.traefik.loadBalancerIP}}
  {{- end }}

        # Configure SSL settings
        ssl:
          insecureSkipVerify: true

        # Configure Server Transport settings
        serversTransport:
          insecureSkipVerify: true

        # Environment variables for the Cloudflare API token
        env:
          - name: CF_API_EMAIL
            valueFrom:
              secretKeyRef:
                key: email
                name: cloudflare-api-credentials
          - name: CF_DNS_API_TOKEN
            valueFrom:
              secretKeyRef:
                key: apiKey
                name: cloudflare-api-credentials
            # use CF_DNS_API_TOKEN instead if CF_API_KEY
            # with the following permissions:
            # Zone.DNS:Edit
            # Zone.Zone:Read
            # Include: All zones for the account

        podSecurityContext:
          fsGroup: 65532
          fsGroupChangePolicy: "OnRootMismatch"

        securityContext:
          capabilities:
            drop: [ALL]
            add: [NET_BIND_SERVICE]
          readOnlyRootFilesystem: true
          runAsGroup: 0
          runAsNonRoot: false
          runAsUser: 0


  destination:
    server: "https://kubernetes.default.svc"
    namespace: argocd
  syncPolicy:
    automated:
      allowEmpty: true
      prune: true
      selfHeal: true
    syncOptions:
      - allowEmpty=true
    retry:
      limit: 5 # number of failed sync attempt retries; unlimited number of attempts if less than 0
      backoff:
        duration: 5s # the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        factor: 2 # a factor to multiply the base duration after each failed retry
        maxDuration: 1m # the maximum amount of time allowed for the backoff strategy
{{- end -}}