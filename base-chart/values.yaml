domain: "home-server.dev"
cloudflare:
  email: "Jonas@Hess.pm"
letsencrypt:
  email: "Jonas@Hess.pm"
traefik_forward_auth:
# https://cognito-idp.eu-central-1.amazonaws.com/eu-central-1_t9DQfKlSX/.well-known/openid-configuration
  oidc_issuer_url: "https://cognito-idp.eu-central-1.amazonaws.com/eu-central-1_t9DQfKlSX"
  oidc_client_id: "6e1bl5i55ao7bhhcufk85ussm"
apps:
  test:
    enabled: false
#     generic:
      #       persistentVolumeClaims:
      #       - name: "data"
      #         hostPath: "/mnt/somewhere/unencrypted/apps/sftpgo/data"
      #       - name: "home"
      #         hostPath: "/mnt/somewhere/encrypted/apps/sftpgo/home"
  argocd:
    enabled: false
  akeyless:
    enabled: false
    path: "/kind-homelab"
  traefik:
    enabled: false
    additionalExposedPorts:
      sftpgo:
        port: 2222
        protocol: TCP
      ftp:
        port: 2121
        protocol: TCP
      dns:
        port: 53
        protocol: UDP
    #     plex:
    #       port: 32400
    #       protocol: TCP
    #     samba-548:
    #       port: 548
    #       protocol: TCP
    #     samba-139:
    #       port: 139
    #       protocol: TCP
    #     samba-445:
    #       port: 445
    #       protocol: TCP
    loadBalancerIP: null
    generic:
      persistentVolumeClaims:
        data: "/mnt/somewhere/unencrypted/apps/traefik/data"
    middlewares:
      cloudflare:
        allowedCIDRs: []
  drone:
    enabled: false
    generic:
      persistentVolumeClaims:
        data: "/mnt/somewhere/unencrypted/apps/drone/data"
      ingress:
        https:
          - subdomain: "drone"
            port: 8080
            service: "drone-helm"

  immichold:
    enabled: false
    generic:
      persistentVolumeClaims:
        library: "/mnt/somewhere/encrypted/apps/immich/library"
        postgresql: "/mnt/somewhere/encrypted/apps/immich/postgresql"
        redis: "/mnt/somewhere/encrypted/apps/immich/redis"
      persistentVolume:
        cnpg: "/mnt/somewhere/encrypted/apps/immich/cnpg"
      ingress:
        https:
          - subdomain: "immichold"
            port: 2283
            service: "immichold-server"
  prowlarr:
    enabled: false
    generic:
      deployment:
        image: "lscr.io/linuxserver/prowlarr:latest"
        ports:
          - containerPort: 9696
        pvcMounts:
          config:
            mountPath: "/config"
            hostPath: "/mnt/somewhere/unencrypted/apps/prowlarr/config"
          media:
            mountPath: "/mnt/media"
            hostPath: "/mnt/somewhere/encrypted/media"
      service:
        ports:
          - name: http
            port: 9696
      ingress:
        https:
          - subdomain: "prowlarr"
            port: 9696
            middlewares:
              - name: "traefik-forward-auth"
                namespace: "argocd"
          - subdomain: "prowlarr"
            priority: 20
            matchSuffix: "&& PathPrefix(`/api`)"
            port: 9696
  readarr:
    enabled: false
    generic:
      deployment:
        image: "lscr.io/linuxserver/readarr:develop"
        ports:
          - containerPort: 8787
        pvcMounts:
          config:
            mountPath: "/config"
            hostPath: "/mnt/somewhere/unencrypted/apps/readarr/config"
          media:
            mountPath: "/mnt/media"
            hostPath: "/mnt/somewhere/encrypted/media"
      service:
        ports:
          - name: http
            port: 8787
      ingress:
        https:
          - subdomain: "readarr"
            port: 8787
            middlewares:
              - name: "traefik-forward-auth"
                namespace: "argocd"
          - subdomain: "readarr"
            priority: 20
            matchSuffix: "&& PathPrefix(`/api`)"
            port: 8787
  tautulli:
    enabled: false
    generic:
      deployment:
        image: "tautulli/tautulli:latest"
        ports:
          - containerPort: 8181
        pvcMounts:
          config:
            mountPath: "/config"
            hostPath: "/mnt/somewhere/unencrypted/apps/tautulli/config"
      service:
        ports:
          - name: http
            port: 8181
      ingress:
        https:
          - subdomain: "tautulli"
            port: 8181
            middlewares:
              - name: "traefik-forward-auth"
                namespace: "argocd"

  radarr:
    enabled: false
    generic:
      deployment:
        image: "lscr.io/linuxserver/radarr:latest"
        ports:
          - containerPort: 7878
        pvcMounts:
          config:
            mountPath: "/config"
            hostPath: "/mnt/somewhere/unencrypted/apps/radarr/config"
          media:
            mountPath: "/mnt/media"
            hostPath: "/mnt/somewhere/encrypted/media"
      service:
        ports:
          - name: http
            port: 7878
      ingress:
        https:
          - subdomain: "radarr"
            port: 7878
            middlewares:
              - name: "traefik-forward-auth"
                namespace: "argocd"
          - subdomain: "radarr"
            priority: 20
            matchSuffix: "&& PathPrefix(`/api`)"
            port: 7878

  sonarr:
    enabled: false
    generic:
      deployment:
        image: "lscr.io/linuxserver/sonarr:latest"
        ports:
          - containerPort: 8989
        pvcMounts:
          config:
            mountPath: "/config"
            hostPath: "/mnt/somewhere/unencrypted/apps/sonarr/config"
          media:
            mountPath: "/mnt/media"
            hostPath: "/mnt/somewhere/encrypted/media"
      service:
        ports:
          - name: http
            port: 8989
      ingress:
        https:
          - subdomain: "sonarr"
            port: 8989
            middlewares:
              - name: "traefik-forward-auth"
                namespace: "argocd"
          - subdomain: "sonarr"
            priority: 20
            matchSuffix: "&& PathPrefix(`/api`)"
            port: 8989
  homeassistant:
    enabled: false
    generic:
      deployment:
        image: "lscr.io/linuxserver/homeassistant:latest"
        ports:
          - containerPort: 8123
        pvcMounts:
          config:
            mountPath: "/config"
            hostPath: "/mnt/somewhere/unencrypted/apps/homeassistant/config"
      service:
        ports:
          - name: http
            port: 8123
      ingress:
        https:
          - subdomain: "homeassistant"
            port: 8123
            middlewares:
              - name: "traefik-forward-auth"
                namespace: "argocd"
          - subdomain: "homeassistant"
            priority: 20
            matchSuffix: "&& (PathPrefix(`/api`) || PathPrefix(`/auth`))"
            port: 8123
  aws:
    enabled: false
  smarthome3:
    enabled: false
    hueIp: "NOT_SET"
    mqttUrl: "tcp://mosquitto-service:1883"
    homeAssistantIp: "homeassistant-service:8123"
    profilesActive: "NOT_SET"
  mosquitto:
    enabled: false
  zigbee2mqtt:
    enabled: false
    mqttServer: "mqtt://mosquitto-service"
    devicePath: "/dev/ttyACM0"
    serialAdapter: "ember"
    zigbeeChannel: "15"
    homeAssistant: "true"
    permitJoin: "false"
    mqttBaseTopic: "zigbee2mqtt"
    generic:
      deployment:
        securityContext:
          privileged: true
        image: "koenkk/zigbee2mqtt:latest"
        ports:
          - containerPort: 8080
        pvcMounts:
          data:
            mountPath: "/app/data"
            hostPath: "/mnt/somewhere/unencrypted/apps/zigbee2mqtt/data"
        deviceMounts:
          zigbeeusb:
            mountPath: "/dev/ttyACM0"
            hostPath: "/dev/serial/by-id/usb-ITead_Sonoff_Zigbee_3.0_USB_Dongle_Plus_2a6293476f3bec118baba4957a0af07f-if00-port0"
        envFrom:
          configMapRef: "zigbee2mqtt-config-map"
          secretRef: "zigbee2mqtt-secret"
      service:
        ports:
          - name: http
            port: 8080
      ingress:
        https:
          - subdomain: "zigbee2mqtt"
            port: 8080
            middlewares:
              - name: "traefik-forward-auth"
                namespace: "argocd"
  sabnzbd:
    enabled: false
    generic:
      deployment:
        image: "lscr.io/linuxserver/sabnzbd:latest"
        ports:
          - containerPort: 8080
        pvcMounts:
          config:
            mountPath: "/config"
            hostPath: "/mnt/somewhere/unencrypted/apps/sabnzbd/config"
          media:
            mountPath: "/mnt/media"
            hostPath: "/mnt/somewhere/encrypted/media"
          downloads:
            mountPath: "/mnt/downloads"
            hostPath: "/data/volumes/sabnzbd-downloads"
          watchdir:
            mountPath: "/mnt/watchdir"
            hostPath: "/mnt/somewhere/unencrypted/apps/watchdir"
      service:
        ports:
          - name: http
            port: 8080
      ingress:
        https:
          - subdomain: "sabnzbd"
            port: 8080
            middlewares:
              - name: "traefik-forward-auth"
                namespace: "argocd"
          - subdomain: "sabnzbd"
            matchSuffix: "&& ( Path(`/sabnzbd/api`) || QueryRegexp(`apikey`, `^[a-z0-9]{32}$`))"
            priority: 20
            port: 8080
  plex:
    enabled: false
    generic:
      deployment:
        image: "ghcr.io/linuxserver/plex:latest"
#        resources:
#          limits:
#            nvidia.com/gpu: 1
        ports:
          - containerPort: 32400
        pvcMounts:
          config:
            mountPath: "/config"
            hostPath: "/mnt/somewhere/encrypted/apps/plex/config"
          media:
            mountPath: "/mnt/media"
            hostPath: "/mnt/somewhere/encrypted/media"
        envFrom:
          secretRef: "plex-secret"
          configMapRef: "plex-config"
      service:
        ports:
          - name: http
            port: 32400
      ingress:
        https:
          - subdomain: "plex"
            port: 32400
        tcp:
          - port: 32400
            traefikEntryPoint: plex
  sftpgo:
    enabled: false
    generic:
      deployment:
        image: "drakkan/sftpgo:latest"
        ports:
          - containerPort: 8080
          - containerPort: 2222
          - containerPort: 2121
        pvcMounts:
          data:
            mountPath: "/srv/sftpgo"
            hostPath: "/mnt/somewhere/encrypted/apps/sftpgo/data"
          config:
            mountPath: "/var/lib/sftpgo"
            hostPath: "/mnt/somewhere/unencrypted/apps/sftpgo/config"
          stirlingpdf:
            mountPath: "/mnt/stirlingpdf/pipeline/"
            hostPath: "/mnt/somewehere/encrypted/apps/stirlingpdf/pipeline/"
        envFrom:
          secretRef: "sftpgo-secret"
        configMapMounts:
          configmap:
            mountPath: "/etc/sftpgo/"
            configMapName: "sftpgo-config"
      service:
        ports:
          - name: http
            port: 8080
          - name: webdav
            port: 8081
          - name: sftp
            port: 2222
            protocol: TCP
          - name: ftp
            port: 2121
            protocol: TCP
      ingress:
        https:
          - subdomain: "sftpgo"
            port: 8080
            middlewares:
              - name: "traefik-forward-auth"
                namespace: "argocd"
          - subdomain: "sftpgo"
            port: 8080
            matchSuffix: "&& PathPrefix(`/web/client/pubshares/`)"
            priority: 20
          - subdomain: "webdav"
            port: 8081
        tcp:
          - port: 2222
            traefikEntryPoint: sftpgo
          - port: 2121
            traefikEntryPoint: ftp
  prometheus:
    enabled: false
    generic:
      ingress:
        https:
          - subdomain: "prometheus"
            port: 9090
            service: "kube-prometheus-stack-prometheus"
            middlewares:
              - name: "traefik-forward-auth"
                namespace: "argocd"
          - subdomain: "grafana"
            port: 80
            service: "kube-prometheus-stack-grafana"
            middlewares:
              - name: "traefik-forward-auth"
                namespace: "argocd"
          - subdomain: "alertmanager"
            port: 9093
            service: "kube-prometheus-stack-alertmanager"
            middlewares:
              - name: "traefik-forward-auth"
                namespace: "argocd"
      persistentVolume:
        prometheus: "/mnt/somewhere/unencrypted/apps/prometheus/data"
      persistentVolumeClaims:
        grafana: "/mnt/somewhere/unencrypted/apps/prometheus/grafana/data"
        alertmanager: "/mnt/somewhere/unencrypted/apps/prometheus/alertmanager/data"
  homematic:
    enabled: false
    persistence:
      data:
        mountPath: "/mnt/somewhere/unencrypted/apps/homematic/ccu_data"
    generic:
      ingress:
        https:
          - subdomain: "homematic"
            port: 80
            service: "homematic-raspberrymatic"
            middlewares:
              - name: "traefik-forward-auth"
                namespace: "argocd"
  qbittorrent:
    enabled: false
    generic:
      deployment:
        image: "lscr.io/linuxserver/qbittorrent:latest"
        ports:
          - containerPort: 8080
        pvcMounts:
          config:
            mountPath: "/config"
            hostPath: "/mnt/somewhere/unencrypted/apps/qbittorrent/config"
          media:
            mountPath: "/mnt/media"
            hostPath: "/mnt/somewhere/encrypted/media"
          downloads:
            mountPath: "/mnt/downloads"
            hostPath: "/mnt/somewhere/unencrypted/apps/qbittorrent/downloads"
          watchdir:
            mountPath: "/mnt/watchdir"
            hostPath: "/mnt/somewhere/unencrypted/apps/qbittorrent/watchdir"
      service:
        ports:
          - name: http
            port: 8080
      ingress:
        https:
          - subdomain: "qbittorrent"
            port: 8080
            middlewares:
              - name: "traefik-forward-auth"
                namespace: "argocd"
          - subdomain: "qbittorrent"
            matchSuffix: "&& PathPrefix(`/api`)"
            priority: 20
            port: 8080
  postgres:
    enabled: false
    generic:
      deployment:
        image: "postgres:17"
        ports:
          - containerPort: 5432
        pvcMounts:
          data:
            mountPath: "/var/lib/postgresql/data"
            hostPath: "/mnt/somewhere/encrypted/apps/postgres/data"
        envFrom:
          secretRef: "postgres-secret"
          configMapRef: "postgres-config"
        configMapMounts:
          postgresqlconf:
            mountPath: "/etc/postgresql"
            configMapName: "postgres-config-file"
      service:
        ports:
          - name: postgres
            port: 5432
  paperlessngx:
    enabled: false
    admin:
      username: "admin"
      email: ~
    generic:
      deployment:
        image: "ghcr.io/paperless-ngx/paperless-ngx:latest"
        ports:
          - containerPort: 8000
        pvcMounts:
          data:
            mountPath: "/usr/src/paperless/data"
            hostPath: "/mnt/somewhere/encrypted/apps/paperlessngx/data"
          media:
            mountPath: "/usr/src/paperless/media"
            hostPath: "/mnt/somewhere/encrypted/apps/paperlessngx/media"
          export:
            mountPath: "/usr/src/paperless/export"
            hostPath: "/mnt/somewhere/encrypted/apps/paperlessngx/export"
          consume:
            mountPath: "/usr/src/paperless/consume"
            hostPath: "/mnt/somewhere/encrypted/apps/paperlessngx/consume"
        envFrom:
          configMapRef: "paperlessngx-config"
          secretRef: "paperlessngx-secret"
      service:
        ports:
          - name: http
            port: 8000
      ingress:
        https:
          - subdomain: "paperlessngx"
            port: 8000
            middlewares:
              - name: "traefik-forward-auth"
                namespace: "argocd"
          - subdomain: "paperlessngx"
            priority: 20
            matchSuffix: "&& PathPrefix(`/api`)"
            port: 8000
  redis:
    enabled: false
    generic:
      deployment:
        image: "docker.io/library/redis:7"
        ports:
          - containerPort: 6379
        pvcMounts:
          data:
            mountPath: "/data"
            hostPath: "/mnt/somewhere/encrypted/apps/redis/data"
        envFrom:
          configMapRef: "redis-config"
      service:
        ports:
          - name: redis
            port: 6379
  gotenberg:
    enabled: false
    generic:
      deployment:
        image: docker.io/gotenberg/gotenberg:8.7
        ports:
          - containerPort: 3000
      service:
        ports:
          - name: gotenberg
            port: 3000
  tika:
    enabled: false
    generic:
      deployment:
        image: docker.io/apache/tika:latest
        ports:
          - containerPort: 9998
      service:
        ports:
          - name: tika
            port: 9998
  ollama:
    enabled: false
    generic:
      deployment:
        image: "ollama/ollama:latest"
#         resources:
#           limits:
#             nvidia.com/gpu: 1
        ports:
          - containerPort: 11434
        pvcMounts:
          data:
            mountPath: "/root/.ollama"
            hostPath: "/mnt/somewhere/encrypted/apps/ollama/data"
      service:
        ports:
          - name: http
            port: 11434
  openwebui:
    enabled: false
    generic:
      deployment:
        image: "ghcr.io/open-webui/open-webui:main"
        ports:
          - containerPort: 8080
        pvcMounts:
          data:
            mountPath: "/app/backend/data"
            hostPath: "/mnt/somewhere/encrypted/apps/openwebui/data"
        envFrom:
          configMapRef: "openwebui-config"
      service:
        ports:
          - name: http
            port: 8080
      ingress:
        https:
          - subdomain: "openwebui"
            port: 8080
            middlewares:
              - name: "traefik-forward-auth"
                namespace: "argocd"
          - subdomain: "chat"
            port: 8080
            middlewares:
              - name: "traefik-forward-auth"
                namespace: "argocd"
  paperlessgpt:
    enabled: false
    LLM_PROVIDER: "openai" # 'openai' or 'ollama'
    LLM_MODEL: "gpt-4o"      # gpt-4o or 'llama2'
    LOG_LEVEL: "INFO"
    AWS_OCR_BUCKET_NAME: "paperless-ocr"
    PROMPT_TITLE_EXPLANATION: ""
    PROMPT_DOCUMENT_TYPE_EXPLANATION: ""
    PROMPT_CORRESPONDENT_EXPLANATION: ""
    PROMPT_POSTAMBLE: ""
    generic:
      deployment:
        image: "jonashess/paperless-gpt:unreleased"
        imagePullPolicy: "Always"
        pvcMounts:
          prompts:
            mountPath: "/app/prompts"
            hostPath: "/mnt/somewhere/encrypted/apps/paperless-gpt/prompts"
        envFrom:
          secretRef: "paperlessgpt-secret"
          configMapRef: "paperlessgpt-config"
  duplicati:
    enabled: false
    generic:
      deployment:
        image: "lscr.io/linuxserver/duplicati:latest"
        ports:
          - containerPort: 8200
        pvcMounts:
          config:
            mountPath: "/config"
            hostPath: "/mnt/somewhere/encrypted/apps/duplicati/config"
#           somewhere:
#             mountPath: "/mnt/somewhere"
#             hostPath: "/mnt/somewehere"
        securityContext:
          privileged: true
          runAsUser: 0
        envFrom:
          configMapRef: "duplicati-cm"
      service:
        ports:
          - port: 8200
      ingress:
        https:
          - subdomain: "duplicati"
            port: 8200
            middlewares:
              - name: "traefik-forward-auth"
                namespace: "argocd"
  stirlingpdf:
    enabled: false
    generic:
      deployment:
        image: "frooodle/s-pdf:latest"
        ports:
          - containerPort: 8080
        pvcMounts:
          scanner:
            mountPath: "/pipeline/watchedFolders/scanner"
            hostPath: "/mnt/somewehere/encrypted/apps/stirlingpdf/pipeline/watchedFolders/scanner"
          paperlessconsume:
            mountPath: "/pipeline/finishedFolders"
            hostPath: "/mnt/somewhere/encrypted/apps/paperlessngx/consume"
#           trainingData:
#             mountPath: "/usr/share/tessdata"
#             hostPath: "/mnt/somewhere/unencrypted/apps/stirling-pdf/trainingData"
#           extraConfigs:
#             mountPath: "/configs"
#             hostPath: "/mnt/somewhere/unencrypted/apps/stirling-pdf/extraConfigs"
  #       customFiles:
  #         mountPath: "/customFiles"
  #         hostPath: "/mnt/somewhere/unencrypted/apps/stirling-pdf/customFiles"
  #       logs:
  #         mountPath: "/logs"
  #         hostPath: "/mnt/somewhere/unencrypted/apps/stirling-pdf/logs"
      service:
        ports:
          - name: http
            port: 8080
      ingress:
        https:
          - subdomain: "stirling-pdf"
            port: 8080
            middlewares:
              - name: "traefik-forward-auth"
                namespace: "argocd"
          - subdomain: "pdf"
            port: 8080
            middlewares:
              - name: "traefik-forward-auth"
                namespace: "argocd"
  asn:
    enabled: false
    generic:
      service:
        ports:
          - name: http
            port: 80
      ingress:
        https:
          - subdomain: "asn"
            port: 80
  githubarc:
    enabled: false
    storageclasses:
      standard:
        hostPath: "/mnt/somewhere/unencrypted/apps/githubarc/storage/standard"
  immich:
    enabled: false
    resources:
      server:
        requests:
          memory: "1Gi"
          cpu: "500m"
        limits:
          memory: "2Gi"
          cpu: "1000m"
      machineLearning:
        requests:
          memory: "2Gi"
          cpu: "1000m"
        limits:
          memory: "4Gi"
          cpu: "2000m"
    generic:
      persistentVolumeClaims:
        library: "/mnt/somewhere/encrypted/apps/immich/library"
        postgresql: "/mnt/somewhere/encrypted/apps/immich/postgresql"
        redis: "/mnt/somewhere/encrypted/apps/immich/redis"
        cli: "/mnt/somewhere/encrypted/apps/immich-old"
      ingress:
        https:
          - subdomain: "immich"
            port: 2283
            service: "immich-app-server"
  search:
    enabled: false
    generic:
      service:
        ports:
          - name: http
            port: 3000
      ingress:
        https:
          - subdomain: "search"
            port: 3000
  cloudflareddns:
    enabled: false
    cron_job: '5 * * * *'
    generic:
      deployment:
        image: "zimmermq/cloudflare-ddns:main"
        envFrom:
            secretRef: "cloudflare-ddns-api-credentials"
            configMapRef: "cloudflare-ddns-config-map"
  adguard:
    enabled: false
    generic:
      deployment:
        image: "adguard/adguardhome:latest"
        ports:
          - containerPort: 3000
          - containerPort: 53
          - containerPort: 80
          - containerPort: 443
        pvcMounts:
          config:
            mountPath: "/opt/adguardhome/conf"
            hostPath: "/mnt/somewhere/unencrypted/apps/adguard/config"
          data:
            mountPath: "/opt/adguardhome/work"
            hostPath: "/mnt/somewhere/unencrypted/apps/adguard/data"
      service:
        ports:
          - name: http
            port: 80
          - name: https
            port: 443
          - name: dns
            port: 53
          - name: admin
            port: 3000
      ingress:
        https:
          - subdomain: "adguard"
            port: 80
            middlewares:
              - name: "traefik-forward-auth"
                namespace: "argocd"
          - subdomain: "adguard-admin"
            port: 3000
            middlewares:
              - name: "traefik-forward-auth"
                namespace: "argocd"
        udp:
          - port: 53
            traefikEntryPoint: dns
  tgtg:
    enabled: false
    generic:
      deployment:
        image: "derhenning/tgtg:latest-alpine"
        envFrom:
          secretRef: "tgtg-credentials"
          configMapRef: "tgtg-config-map"
        pvcMounts:
          tokens:
            mountPath: "/tokens"
            hostPath: "/mnt/somewhere/unencrypted/apps/tgtg/tokens"
      service:
        ports:
          - name: http
            port: 8000
  duplicatiprometheusexporter:
    enabled: false
    generic:
      deployment:
        image: "aleixolucas/duplicati-prometheus-exporter"
      service:
        ports:
          - name: http
            port: 5000
  cnpg:
    enabled: false
  zfs:
    enabled: false
  argoimageupdater:
    enabled: false
    github:
      owner: "zimmermq"
    helm:
      targetRevision: "0.9.0"