---
# Source: homelab-base-chart/templates/_generic/pvc.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: "drone-data-pv"
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-options: Prune=true
spec:
  capacity:
    storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
# WARNING: THIS WILL DELETE THE PV AND ALL DATA INSIDE IT
  persistentVolumeReclaimPolicy: Retain
  storageClassName: ''
  hostPath:
    type: Directory
    path: /mnt/somewhere/unencrypted/apps/drone/data
  claimRef:
    apiVersion: v1
    kind: PersistentVolumeClaim
    name: "drone-data-pvc"
    namespace: argocd
---
# Source: homelab-base-chart/templates/_generic/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: "drone-data-pvc"
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-options: Prune=true
spec:
  storageClassName: ''
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
---
# Source: homelab-base-chart/templates/drone/drone-helm.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: drone-helm
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  project: default
  source:
    chart: drone
    repoURL: https://charts.drone.io
    targetRevision: 0.6.5
    helm:
      # Values file as block file
      valuesObject:
        persistentVolume:
          ## If you are using SQLite as your DB for Drone, it is recommended to enable persistence. If
          ## enabled, the Chart will create a PersistentVolumeClaim to store its state in. If you are
          ## using a DB other than SQLite, set this to false to avoid allocating unused storage.
          ## If set to false, Drone will use an emptyDir instead, which is ephemeral.
          ##
          enabled: true

          ## If you'd like to bring your own PVC for persisting Drone state, pass the name of the
          ## created + ready PVC here. If set, this Chart will not create the default PVC.
          ## Requires server.persistentVolume.enabled: true
          ##
          existingClaim: "drone-data-pvc"

          ## Drone server data Persistent Volume mount root path
          ##
          mountPath: /data



        ## If you'd like to provide your own Kubernetes Secret object instead of passing your values
        ## in un-encrypted, pass in the name of a created + populated Secret in the same Namespace
        ## as the Drone server. All secrets within this configmap will be mounted as environment
        ## variables, with each key/value mapping to a corresponding environment variable on the
        ## Drone server.
        ##
        extraSecretNamesForEnvFrom:
        - drone-secrets


        ## The keys within the "env" map are mounted as environment variables on the Drone server pod.
        ## See the full reference of Drone server environment variables here:
        ## Ref: https://docs.drone.io/installation/reference/
        ##
        env:

          ## The protocol to pair with the value in DRONE_SERVER_HOST (http or https).
          ## Ref: https://docs.drone.io/installation/reference/drone-server-proto/
          ##
          DRONE_SERVER_PROTO: https
          ## REQUIRED: Set the user-visible Drone hostname, sans protocol.
          ## Ref: https://docs.drone.io/installation/reference/drone-server-host/
          ##
          DRONE_SERVER_HOST: "drone.home-server.dev"
  destination:
    server: "https://kubernetes.default.svc"
    namespace: argocd
  syncPolicy:
    automated:
      allowEmpty: true
      prune: true
      selfHeal: true
    syncOptions:
      - allowEmpty=true
    retry:
      limit: 5 # number of failed sync attempt retries; unlimited number of attempts if less than 0
      backoff:
        duration: 5s # the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        factor: 2 # a factor to multiply the base duration after each failed retry
        maxDuration: 1m # the maximum amount of time allowed for the backoff strategy
---
# Source: homelab-base-chart/templates/drone/drone-kubernetes-secrets.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: drone-kubernetes-secrets
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  project: default
  source:
    chart: drone-kubernetes-secrets
    repoURL: https://charts.drone.io
    targetRevision: 0.1.4
    helm:
      # Values file as block file
      valuesObject:
        ## If you need to pull images from a private Docker image repository, pass in the name
        ## of a Kubernetes Secret that contains the needed secret. For more details, see:
        ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
        ##
        imagePullSecrets: []
        # - name: "image-pull-secret"

        ## For small or experimental deployments of the Kubernetes runner, 1 replica will suffice.
        ## For production cases, 2-3 are recommended. This does not grant additional parallelism,
        ## but does ensure that upgrades, config changes, and disruptions are handled more gracefully.
        replicaCount: 1

        nameOverride: ""
        fullnameOverride: ""

        podSecurityContext: {}
        # fsGroup: 2000

        securityContext: {}
          # capabilities:
          #   drop:
          #   - ALL
          # readOnlyRootFilesystem: true
          # runAsNonRoot: true
        # runAsUser: 1000

        ## Add extra annotations to the Kubernetes pod here.
        ##
        podAnnotations: {}

        service:
          type: ClusterIP
          port: 3000

        resources: {}
          # limits:
          #   cpu: 100m
          #   memory: 128Mi
          # requests:
          #   cpu: 100m
        #   memory: 128Mi

        ## If you'd like to force the pod to run on a specific node or set of nodes, set a selector here.
        ##
        nodeSelector: {}

        tolerations: []

        affinity: {}

        ## If you'd like to provide your own Kubernetes Secret object instead of passing your values
        ## in un-encrypted, pass in the name of a created + populated Secret in the same Namespace
        ## as the pod. All secrets within this configmap will be mounted as environment variables,
        ## with each key/value mapping to a corresponding environment variable on the pod.
        ##
        extraSecretNamesForEnvFrom:
          - drone-secrets

        rbac:
          ## If true, create a Role + Rolebinding in the secretNamespace that allows the extension to
          ## fetch Kubernetes Secrets.
          ##
          enabled: true
          ## The namespace that the extension is allowed to fetch secrets from. Unless
          ## rbac.restrictToSecrets is set below, the extension will be able to pull all secrets in
          ## the namespace specified here.
          ##
          secretNamespace: argocd
          ## Optionally restrict secret pulls to a subset of secrets in the secret namespace. This is
          ## particularly useful if your secrets extension is fetching secrets from a namespace that other
          ## Drone components have been deployed to.
          restrictToSecrets: []

        ## The keys within the "env" map are mounted as environment variables on the secrets extension pod.
        ##
        env:
          ## REQUIRED: Shared secret value for comms between the Kubernetes runner and this secrets plugin.
          ## Must match the value set in the runner's env.DRONE_SECRET_PLUGIN_TOKEN.
          ## Ref: https://kube-runner.docs.drone.io/installation/reference/drone-secret-plugin-token/
          ## This is commented out in order to leave you the ability to set the
          ## key via a separately provisioned secret (see existingSecretName above).
          ##
          # SECRET_KEY:

          ## The Kubernetes namespace to retrieve secrets from.
          ##
          KUBERNETES_NAMESPACE: argocd
  destination:
    server: "https://kubernetes.default.svc"
    namespace: argocd
  syncPolicy:
    automated:
      allowEmpty: true
      prune: true
      selfHeal: true
    syncOptions:
      - allowEmpty=true
    retry:
      limit: 5 # number of failed sync attempt retries; unlimited number of attempts if less than 0
      backoff:
        duration: 5s # the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        factor: 2 # a factor to multiply the base duration after each failed retry
        maxDuration: 1m # the maximum amount of time allowed for the backoff strategy
---
# Source: homelab-base-chart/templates/drone/drone-runner-helm.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: drone-runner-helm
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  project: default
  source:
    chart: drone-runner-docker
    repoURL: https://charts.drone.io
    targetRevision: 0.6.1
    helm:
      # Values file as block file
      valuesObject:

        replicaCount: 1
        autoscaling:
          enabled: false
          minReplicas: 1
          maxReplicas: 100
          targetCPUUtilizationPercentage: 80
          # targetMemoryUtilizationPercentage: 80

        rbac:
          buildNamespaces:
            - argocd


        ## If you'd like to provide your own Kubernetes Secret object instead of passing your values
        ## in un-encrypted, pass in the name of a created + populated Secret in the same Namespace
        ## as the Drone server. All secrets within this configmap will be mounted as environment
        ## variables, with each key/value mapping to a corresponding environment variable on the
        ## Drone server.
        ##
        extraSecretNamesForEnvFrom:
        - drone-secrets


        ## The keys within the "env" map are mounted as environment variables on the Kubernetes runner pod.
        ## See the full reference of Kubernetes runner environment variables here:
        ## Ref: https://docs.drone.io/runner/docker/configuration/reference/
        ##
        env:
          ## The hostname/IP (and optionally the port) for your Kubernetes runner. Defaults to the "drone"
          ## service that the drone server Chart creates by default.
          ## Ref: https://docs.drone.io/runner/docker/configuration/reference/drone-rpc-host/
          ##
          DRONE_RPC_HOST: drone-helm:8080

          ## The protocol to use for communication with Drone server.
          ## Ref: https://docs.drone.io/runner/docker/configuration/reference/drone-rpc-proto/
          ##
          DRONE_RPC_PROTO: http

          ## Determines the default Kubernetes namespace for Drone builds to run in.
          ## Ref: https://kube-runner.docs.drone.io/installation/reference/drone-namespace-default/
          ##
          DRONE_NAMESPACE_DEFAULT: argocd

          ## Ref: https://kube-runner.docs.drone.io/installation/reference/drone-secret-plugin-endpoint/
          #
          DRONE_SECRET_PLUGIN_ENDPOINT: http://drone-kubernetes-secrets:3000

  destination:
    server: "https://kubernetes.default.svc"
    namespace: argocd
  syncPolicy:
    automated:
      allowEmpty: true
      prune: true
      selfHeal: true
    syncOptions:
      - allowEmpty=true
    retry:
      limit: 5 # number of failed sync attempt retries; unlimited number of attempts if less than 0
      backoff:
        duration: 5s # the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        factor: 2 # a factor to multiply the base duration after each failed retry
        maxDuration: 1m # the maximum amount of time allowed for the backoff strategy
---
# Source: homelab-base-chart/templates/drone/drone-external-secret.yaml
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: drone-secrets
  namespace: argocd
spec:
  refreshInterval: 1h

  secretStoreRef:
    kind: SecretStore
    name: akeyless-secret-store

  target:
    name: drone-secrets
    creationPolicy: Owner
    template:
      metadata:
        annotations:
          X-Drone-Events: access-forbidden
          X-Drone-Repos: access-forbidden

  data:
    - secretKey: "DRONE_USER_CREATE"
      remoteRef:
        key: "/kind-homelab/drone/user_create"
    - secretKey: "DRONE_USER_FILTER"
      remoteRef:
        key: "/kind-homelab/drone/user_filter"
    - secretKey: "DRONE_RPC_SECRET"
      remoteRef:
        key: "/kind-homelab/drone/rpc_secret"
    - secretKey: "DRONE_GITHUB_CLIENT_ID"
      remoteRef:
        key: "/kind-homelab/drone/github_client_id"
    - secretKey: "DRONE_GITHUB_CLIENT_SECRET"
      remoteRef:
        key: "/kind-homelab/drone/github_client_secret"
    - secretKey: "DRONE_SECRET_PLUGIN_TOKEN"
      remoteRef:
        key: "/kind-homelab/drone/rpc_secret"
    - secretKey: "SECRET_KEY"
      remoteRef:
        key: "/kind-homelab/drone/rpc_secret"
---
# Source: homelab-base-chart/templates/_generic/ingress-https.yaml
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: drone-https-8080-0
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-options: Prune=true,SkipDryRunOnMissingResource=true
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`drone.home-server.dev`) 
      kind: Rule
      priority: 10
      services:
        - name: drone-helm
          port: 8080
  tls:
    certResolver: cloudflare
