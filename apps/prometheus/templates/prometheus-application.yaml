apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kube-prometheus-stack
  namespace: {{ $.Release.Namespace }}
  finalizers:
    - resources-finalizer.argocd.argoproj.io
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true,ServerSideApply=true
    argocd.argoproj.io/sync-wave: "1"
spec:
  project: default
  source:
    chart: kube-prometheus-stack
    repoURL: https://prometheus-community.github.io/helm-charts
    targetRevision: 76.5.1
    helm:
      # Values file as block file
      valuesObject:
        # Default values for kube-prometheus-stack.
        # This is a YAML-formatted file.
        # Declare variables to be passed into your templates.

        ## Provide a name in place of kube-prometheus-stack for `app:` labels
        ##
        nameOverride: ""

        prometheus:
          prometheusSpec:
            replicas: 1
            storageSpec:
              volumeClaimTemplate:
                spec:
                  storageClassName: ""
                  accessModes: [ "ReadWriteOnce" ]
                  resources:
                    requests:
                      storage: 10Gi
                  selector:
                    matchLabels:
                      app: prometheus-prometheus
            additionalScrapeConfigsSecret:
              enabled: true
              name: prometheus-scrape-secret
              key: scrape-config.yaml
          persistentVolumeClaim:
            existingClaim: prometheus-prometheus-pvc

        grafana:
          defaultDashboardsTimezone: Europe/Berlin
          adminPassword: ""
          adminUser: admin
          admin:
            existingSecret: grafana-admin-credentials
            userKey: admin-user
            passwordKey: admin-password
          sidecar:
            dashboards:
              enabled: true
              label: grafana_dashboard
          persistence:
            enabled: true
            existingClaim: prometheus-grafana-pvc
        alertmanager:
          alertmanagerSpec:
            logLevel: info
            secrets:
              - pagerduty-secret
          config:
            global:
              resolve_timeout: 5m
            route:
              group_by: ['cluster', 'alertname']
              group_wait: 30s
              group_interval: 5m
              repeat_interval: 12h
              receiver: 'pagerduty'
            receivers:
              - name: "null"  # Add this to your config as well
              - name: 'pagerduty'
                pagerduty_configs:
                  - send_resolved: true
                    service_key_file: "/etc/alertmanager/secrets/pagerduty-secret/pagerduty_service_key"
        defaultRules:
          create: true
          rules:
            kubeControllerManager: false
            kubeProxy: false
            kubeSchedulerAlerting: false

  destination:
    server: "https://kubernetes.default.svc"
    namespace: {{ $.Release.Namespace }}
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ServerSideApply=true